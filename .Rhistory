library(tidyverse)
version
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
# BiocManager install
if (!requireNamespace("BiocManager", quietly = TRUE))
:
install.packages("BiocManager")
# install Bioconductor packages
packages <- c("tximport", "GenomicFeatures", "DESeq2", "clusterProfiler", "AnnotationDbi", "org.Hs.eg.db", "org.Mm.eg.db", "EnhancedVolcano", "AnnotationDbi", "ReactomePA")
BiocManager::install(packages)
remove(packages)
BiocManager::install()
library(tidyverse)
##load tools
```{r echo=FALSE}
library(tidyverse)
install.packages("sys")
install.packages("sys")
library(readr)
rawCounts <- read_delim("input_Data/rawCounts.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(rawCounts)
library(readr)
rawCounts <- read_delim("input_Data/rawCounts.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(rawCounts)
colData <- read_tsv("input_Data/rawCounts.tsv",
delim = "\t")
colData <- read_tsv("input_Data/rawCounts.tsv")
colData == rawCounts
exp_design <- read_tsv("input_Data/experiment_Design.tsv")
View(exp_design)
exp_design <- exp_design[exp_design$Analysed == "Yes"]
exp_design <- exp_design[,exp_design$Analysed == "Yes"]
exp_design <- exp_design[exp_design$Analysed == "Yes",]
colData <- exp_design[,"Run"]
colData
exp_design.rownames <- exp_design[,"Run"]
exp_design.rownames() <- exp_design[,"Run"]
`rownames<-`(exp_design, exp_design[,"Run"])
exp_design <- read.tsv("input_Data/experiment_Design.tsv") %>% rownames <- (exp_design$Run)
exp_design <- read.tsv("input_Data/experiment_Design.tsv")
exp_design <- read.delim("input_Data/experiment_Design.tsv", delim = "\t")
exp_design <- read.delim("input_Data/experiment_Design.tsv", delim = "/t")
exp_design <- read.table("input_Data/experiment_Design.tsv", delim = "/t")
exp_design <- read.table("input_Data/experiment_Design.tsv", sep = "\t")
rownames(exp_design) <- exp_design$Run
exp_design <- read.table("input_Data/experiment_Design.tsv", sep = "\t")
exp_design <- read.table("input_Data/experiment_Design.tsv", sep = "\t", header = TRUE)
rownames(exp_design) <- exp_design$Run
library(DESeq2)
View(rawCounts)
remove(all)
remove()
remove(everything())
View(colData)
library(tidyverse)
library(DESeq2)
colData <- read_tsv("input_Data/experiment_Design.tsv", row.names = 1)
colData <- read.tsv("input_Data/experiment_Design.tsv", row.names = 1)
colData <- read.table("input_Data/experiment_Design.tsv", row.names = 1)
colData <- read.table("input_Data/experiment_Design.tsv", delim = "\t", row.names = 1)
colData <- read.table("input_Data/experiment_Design.tsv", sep = "\t", row.names = 1)
countData <- read_tsv("input_Data/rawCounts.tsv")
View(colData)
colData <- read.table("input_Data/experiment_Design.tsv", sep = "\t", row.names = 1) %>%
filter(`Analysed` == "Yes")
colData <- read.table("input_Data/experiment_Design.tsv", sep = "\t", row.names = 1, header=TRUE) %>%
filter(`Analysed` == "Yes")
colData <- read.table("input_Data/experiment_Design.tsv", sep = "\t", row.names = 1) %>%
filter(`Analysed` == "Yes")
View(colData)
colData <- read.table("input_Data/experiment_Design.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
filter(`Analysed` == "Yes")
View(colData)
colData <- read.table("input_Data/experiment_Design.tsv")
colData <- read.table("input_Data/experiment_Design.tsv", sep = "\t")
View(colData)
colData <- read.table("input_Data/experiment_Design.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
filter(`Analysed` == "Yes")
countData <- read_tsv("input_Data/rawCounts.tsv")
View(colData)
View(countData)
countData <- read_tsv("input_Data/rawCounts.tsv", row.names = 1)
countData <- read.table("input_Data/rawCounts.tsv", row.names = 1)
countData <- read.table("input_Data/rawCounts.tsv", sep = "\t", row.names = 1)
View(countData)
countData <- read.table("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1)
colData <- read.table("input_Data/experiment_Design.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
filter(`Analysed` == "Yes")
countData <- read.table("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1)
countData <- read.table("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1)
countData <- read.table("input_Data/rawCounts.tsv", sep = "\t", header = TRUE1)
countData <- read.table("input_Data/rawCounts.tsv", sep = "\t", header = TRUE)
countData <- read.table("input_Data/rawCounts.tsv", sep = "\t")
countData <- read.table("input_Data/rawCounts.tsv", sep = "\t")
countData <- read.table("input_Data/rawCounts.tsv", sep = "\t", na.pass = TRUE)
countData <- read.table("input_Data/rawCounts.tsv", sep = "\t", na.pass())
countData <- read.table("input_Data/rawCounts.tsv", sep = "\t")
countData <- read_tsv("input_Data/rawCounts.tsv")
View(countData)
?read_tsv
countData <- read.table("input_Data/rawCounts.tsv")
countData <- read.table("input_Data/rawCounts.tsv")
countData <- read.table("input_Data/rawCounts.tsv", sep = "\t")
countData <- read.table("input_Data/rawCounts.tsv", sep = "/t")
countData <- read.table("input_Data/rawCounts.tsv")
countData <- read.tsv("input_Data/rawCounts.tsv")
countData <- read.delim("input_Data/rawCounts.tsv")
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1)
View(countData)
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1)
View(countData)
summarize(countData)
table(countData)
View(colData)
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
filter(rowname in row.names(colData))
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
filter(rowname %in% row.names(colData))
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
filter(rowname() %in% row.names(colData))
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
filter(row.name %in% row.names(colData))
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
filter(rownames()) %in% row.names(colData))
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
filter(rownames() %in% row.names(colData))
row.names(colData)
row.names(countData)
colnames(countData)
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
filter(colnames(.) %in% row.names(colData))
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
filter(colnames(countData) %in% row.names(colData))
colnames(countData)
rownames(colData)
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
select(colnames(countData) %in% row.names(colData))
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
select(if_all(everything(.), %in% rownames(colData)))
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
select(if_all(%in% rownames(colData)))
select(if_all(%in% rownames(colData))
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(if_all(colnames(.) %in% rownames(colData))
a
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(if_all(everything(.), colnames(.) %in% rownames(colData))
a
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(if_all(everything(.), colnames(.) %in% rownames(colData))
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
select(if_all(everything(.), colnames(.) %in% rownames(colData)))
?select
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
select(if_all(everything(.), %in% row.names(colData)))
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(-1) %>%
select(if_all(everything(.) %in% row.names(colData)))
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(all_of(row.names(colData)))
View(countData)
colData <- read.table("input_Data/experiment_Design.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
filter(`Analysed` == "Yes")
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(all_of(row.names(colData)))
View(colData)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = "~Factor.value.infect.")
~Factor.value.infect.
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~Factor.value.infect.)
colnames(colData)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ "Factor.Value.infect." )
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ "Factor.Value.infect.")
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = "~ Factor.Value.infect.")
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ colData$"Factor.Value.infect.")
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = as.formula("Factor.Value.infect."))
colnames(colData)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect. )
dds
## Run the DESeq pipeline
```{r warning=FALSE}
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect. )
ddsResults <- DESeq(dds)
filter(dds, rowSums(counts(dds)) > 1)
dds
View(ddsResults)
## Run the DESeq pipeline
```{r echo = FALSE}
ddsResults <- DESeq(dds)
ddsResults <- DESeqResults(ddsResults)
viewdds
dds
view(dds)
View(dds)
View(dds@assays@data@listData$counts)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect. ) %>%
filter(rowSums(counts(dds)) > 1)
dds <- dds[rowSums(counts(dds) > 1,)
dds <- DESeqDataSetFromMatrix(countData = countData,
a
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect. )
dds <- dds[rowSums(counts(dds) > 1,)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect. )
dds <- dds[(rowSums(counts(dds) > 1),)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect. )
dds@assays@data@listData$counts <- dds@assays@data@listData$counts[(rowSums(counts(dds) > 1),)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect. )
dds@assays@data@listData$counts <- dds@assays@data@listData$counts[(rowSums(counts(dds) > 1),]
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect. )
dds@assays@data@listData$counts <- dds@assays@data@listData$counts[rowSums(counts(dds) > 1,]
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect. )
dds@assays@data@listData$counts <- dds@assays@data@listData$counts[,rowSums(counts(dds) > 1]
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect. )
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect.)
dds <- dds[rowSums(counts(dds))>1, ]
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect.)
dds <- dds[rowSums(counts(dds))>1, ]
dds
ddsResults <- DESeq(dds)
ddsResults <- DESeq(dds)
ddsResults <- DESeqResults(ddsResults)
all(rownames(coldata) == colnames(cts))
all(rownames(colData) == colnames(countData))
View(colData)
View(countData)
all(rownames(colData) %in% colnames(countData))
all(rownames(colData) == colnames(countData))
all(rownames(colData) %in% colnames(countData))
all(rownames(colData) == colnames(countData))
all(rownames(colData) == colnames(countData)) # this checks if they're the same vector
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(all_of(row.names(colData))) %>%
filter(rowSums(counts(countData))>1)
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(all_of(row.names(colData))) %>%
filter(rowSums(.)>1)
library(tidyverse)
library(DESeq2)
colData <- read.table("input_Data/experiment_Design.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
filter(`Analysed` == "Yes")
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(all_of(row.names(colData))) %>%
filter(rowSums(.)>1)
all(rownames(colData) == colnames(countData)) # this checks if they're the same vector
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ Factor.Value.infect.)
ddsResults <- DESeq(dds)
ddsResults <- DESeqResults(ddsResults)
ddsResults <- DESeq(dds)
ddsResults <- results(ddsResults)
ddsResults <- DESeq(dds)
ddsResults <- results(ddsResults)
ddsResults <- DESeq(dds)
ddsResults <- results(ddsResults)
ddsResults
table(ddsResults)
summarize(ddsResults)
summarise(ddsResults)
View(ddsResults)
as.tibble(ddsResults)
ddsResults
View(as.data.frame(ddsResults))
summarize(as.data.frame(ddsResults))
table(as.data.frame(ddsResults))
summary(as.data.frame(ddsResults))
library(MAplot)
library(EnhancedVolcano)
EnhancedVolcano(ddsResults)
VolcanoPlot(ddsResults)
EnhancedVolcano(ddsResults)
EnhancedVolcano(as.data.frame(ddsResults))
View(ddsResults)
EnhancedVolcano(as.data.frame(ddsResults), x="log2FoldChange", y="pvalue")
EnhancedVolcano(as.data.frame(ddsResults), lab=rownames(ddsResults), x="log2FoldChange", y="pvalue")
EnhancedVolcano(as.data.frame(ddsResults), lab=rownames(ddsResults), x="log2FoldChange", y="pvalue")
EnhancedVolcano(as.data.frame(ddsResults), lab=rownames(ddsResults), x="log2FoldChange", y="pvalue", pointSize = 1)
EnhancedVolcano(as.data.frame(ddsResults), lab=rownames(ddsResults), x="log2FoldChange", y="pvalue", pointSize = 2)
EnhancedVolcano(as.data.frame(ddsResults),
lab=rownames(ddsResults),
x="log2FoldChange",
y="pvalue",
pointSize = 1,
title = "Volcano Plot",
subtitle = "Inspecting the proportions between deregulated genes")
EnhancedVolcano(as.data.frame(ddsResults),
lab=rownames(ddsResults),
x="log2FoldChange",
y="pvalue",
pointSize = 1,
title = "Volcano Plot",
subtitle = "Inspecting the proportions between deregulated genes")
EnhancedVolcano(as.data.frame(ddsResults),
lab=rownames(ddsResults),
x="log2FoldChange",
y="pvalue",
pointSize = 1,
title = "Volcano Plot",
subtitle = "Inspecting the proportions between deregulated genes",
pCutoffCol = "padj")
EnhancedVolcano(as.data.frame(ddsResults),
lab=rownames(ddsResults),
x="log2FoldChange",
y="pvalue",
pointSize = 1,
title = "Volcano Plot",
subtitle = "Inspecting the proportions between deregulated genes",
pCutoffCol = "padj")
EnhancedVolcano(as.data.frame(ddsResults),
lab=rownames(ddsResults),
x="log2FoldChange",
y="pvalue",
pointSize = 1,
title = "Volcano Plot",
subtitle = "Inspecting the proportions between deregulated genes",
pCutoffCol = "padj",
pCutoff = 5,
FCcutoff = 1)
EnhancedVolcano(as.data.frame(ddsResults),
lab=rownames(ddsResults),
x="log2FoldChange",
y="pvalue",
pointSize = 1,
pCutoffCol = "padj",
pCutoff = 5,
FCcutoff = 1,
title = "Volcano Plot",
subtitle = "Inspecting the proportions between deregulated genes",
caption = raw("Significance cutoff: -log10(5) \n FoldChange cutoff: +-1 (2fold, so at least half/double)"))
EnhancedVolcano(as.data.frame(ddsResults),
lab=rownames(ddsResults),
x="log2FoldChange",
y="pvalue",
pointSize = 1,
pCutoffCol = "padj",
pCutoff = 5,
FCcutoff = 1,
title = "Volcano Plot",
subtitle = "Inspecting the proportions between deregulated genes",
caption = "Significance cutoff: -log10(5) \n FoldChange cutoff: +-1 (2fold, so at least half/double)")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
rawCounts <-
## Load tools & packages
```{r echo=FALSE}
library(tidyverse)
verison
version
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DESeq2)
library(EnhancedVolcano)
colData <- read.table("input_Data/experiment_Design.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
filter(`Analysed` == "Yes", #I exclude samples that were discarded
`Sample.Characteristic.developmental.stage.` == "seedling")  %>% #I exclude flowering stage samples to keep things simple
transmute(`resistance` = as.factor(`Factor.Value.phenotype.`),
`infection` = as.factor(`Factor.Value.infect.`)) #then I leave only the factors of interest: resistance to blight & infection status
# recoding the levels for quicker access
levels(colData$resistance) <- c("R", "S")
levels(colData$infection) <- c("TRT", "CTRL")
countData <- read.delim("input_Data/rawCounts.tsv", sep = "\t", header = TRUE, row.names = 1) %>%
select(all_of(row.names(colData))) #select all the samples remaining from colData
dim(countData)
colData_infected <- colData[colData$infection == "TRT",]
countData_infected <- read.delim("input_Data/rawCounts.tsv",
sep = "\t",
header = TRUE,
row.names = 1) %>%
select(all_of(row.names(colData_infected)))
dim(colData_infected)[1] == dim(countData_infected)[2]
colData_R <- colData[colData$resistance == "R",]
countData_R <- read.delim("input_Data/rawCounts.tsv",
sep = "\t",
header = TRUE,
row.names = 1) %>%
select(all_of(row.names(colData_R)))
dim(colData_R)[1] == dim(countData_R)[2]
colData_S <- colData[colData$resistance == "S",]
countData_S <- read.delim("input_Data/rawCounts.tsv",
sep = "\t",
header = TRUE,
row.names = 1) %>%
select(all_of(row.names(colData_S)))
dim(colData_S)[1] == dim(countData_S)[2]
# this checks if they're the same vector
all(rownames(colData) == colnames(countData))
all(rownames(colData_infected) == colnames(countData_infected))
all(rownames(colData_R) == colnames(countData_R))
all(rownames(colData_S) == colnames(countData_S))
design <- ~ resistance + infection
dds_infected <- DESeqDataSetFromMatrix(countData = countData_infected,
colData = colData_infected,
design = ~ resistance)
# only use the genes actually expressed
dds_infected <- dds_infected[rowSums(dds_infected@assays@data@listData[["counts"]]) > 1]
dim(countData_infected)[1] - dim(dds_infected)[1]
dds_infected <- DESeq(dds_infected)
results_RvS <- results(dds_infected, contrast=c("resistance", "R", "S"))
plotMA(results_RvS, ylim=c(-2,2))
#EnhancedVolcano(toptable = as.data.frame(results_RvS),
#               x = results_RvS$log2FoldChange,
#              y = results_RvS$padj)
assay(dds_infected)
head(assay(dds))
head(assay(dds_infected))
head(assay(dds_infected))
boxplot(assay(dds_infected))
ggplot(assay(dds_infected), aes(rownames(dds_infected), rowSums(dds_infected))) +
geom_boxplot()
ggplot(assay(dds_infected), aes(rownames(dds_infected), rowSums(dds_infected))) +
geom_point()
ggplot(as.data.frame(assay(dds_infected)), aes(rownames(dds_infected), rowSums(dds_infected))) +
geom_point()
dds_infected <- DESeqDataSetFromMatrix(countData = countData_infected,
colData = colData_infected,
design = ~ resistance)
dim(dds_infected)
# only use the genes actually expressed
dds_infected <- dds_infected[rowSums(dds_infected@assays@data@listData[["counts"]]) > 1,]
dim(dds_infected)
dim(countData_infected)[1] - dim(dds_infected)[1]
# only use the genes actually expressed
dds_infected <- dds_infected[assay(dds_infected)[["counts"]]) > 1,]
# only use the genes actually expressed
dds_infected <- dds_infected[rowSums(assay(dds_infected)[["counts"]]) > 1,]
ggplot(results_RvS, aes(x = padj)) +
geom_histogram()
ggplot(as.data.frame(results_RvS), aes(x = padj)) +
geom_histogram()
ggplot(as.data.frame(results_RvS), aes(x = padj)) +
geom_histogram(bins=100)
ggplot(as.data.frame(results_RvS), aes(x = padj)) +
geom_histogram(bins=1000)
ggplot(as.data.frame(results_RvS), aes(x = padj)) +
geom_histogram(bins=500)
ggplot(as.data.frame(results_RvS), aes(x = padj)) +
geom_histogram(bins=200)
plotPCA(dds_infected_n)
#first i need the normalized counts
dds_infected_n <- rlog(dds_infected)
plotPCA(dds_infected_n)
DESeq2::plotPCA(dds_infected_n)
DESeq2::plotPCA(object = dds_infected_n, intgroup = "resistance")
#first i need the normalized counts
dds_infected_n <- rlog(dds_infected)
DESeq2::plotPCA(object = dds_infected_n, intgroup = "resistance")
DESeq2::plotPCA(object = dds_infected_n, intgroup = "infection")
DESeq2::plotPCA(object = dds_infected_n, intgroup = "resistance")
summary(results_RvS)
library(AnnotationDbi)
library(org.Os.eg.db)
